#!/usr/bin/env python3

# pylint: disable=invalid-name, ungrouped-imports, too-many-lines, missing-docstring, line-too-long

import os
import re
import sys
import json
import subprocess
import tempfile
import atexit
import argparse
import logging
import errno
import textwrap
from subprocess import PIPE, Popen
from datetime import datetime

import urwid

# #############################################################################
# constants
# #############################################################################

DATA_FOLDER = os.getenv('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))
CFG_FOLDER = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))

SIGNALCLI_LEGACY_FOLDER = os.path.join(CFG_FOLDER, 'signal')
SIGNALCLI_LEGACY_DATA_FOLDER = os.path.join(SIGNALCLI_LEGACY_FOLDER, 'data')
SIGNALCLI_LEGACY_ATTACHMENT_FOLDER = os.path.join(SIGNALCLI_LEGACY_FOLDER, 'attachments')

SIGNALCLI_FOLDER = os.path.join(DATA_FOLDER, 'signal-cli')
SIGNALCLI_DATA_FOLDER = os.path.join(SIGNALCLI_FOLDER, 'data')
SIGNALCLI_ATTACHMENT_FOLDER = os.path.join(SIGNALCLI_FOLDER, 'attachments')

SCLI_DATA_FOLDER = os.path.join(DATA_FOLDER, 'scli')
SCLI_HISTORY_FILE = os.path.join(SCLI_DATA_FOLDER, 'history')
SCLI_CFG_FILE = os.path.join(CFG_FOLDER, 'sclirc')
SCLI_LOG_FILE = os.path.join(SCLI_DATA_FOLDER, 'log')

# #############################################################################
# coloring stuff
# #############################################################################

# TODO: make costumizable

PALETTE = [('normal', '', ''),
           ('box_normal', '', ''),
           ('box_focused', 'dark blue', ''),
           ('bold', 'bold', ''),
           ('italic', 'italics', ''),
           ('strikethrough', 'strikethrough', ''),
           ('bolditalic', 'italics,bold', ''),
           ('reversed', 'standout', ''),
           ('selected', 'bold', '')]

PALETTE_NO_ITALICS = [
           ('normal', '', ''),
           ('box_normal', '', ''),
           ('box_focused', 'dark blue', ''),
           ('bold', 'bold', ''),
           ('italic', 'bold', ''),
           ('strikethrough', 'strikethrough', ''),
           ('bolditalic', 'bold', ''),
           ('reversed', 'standout', ''),
           ('selected', 'bold', '')]

LIST_FOCUS_MAP = { None: 'reversed',
                   'normal': 'reversed',
                   'bold'  : 'reversed',
                   'italic': 'reversed',
                   'strikethrough': 'reversed',
                   'bolditalic': 'reversed'}

FORMAT_MAP = {'_': 'italic',
              '*': 'bold',
              '~': 'strikethrough'}

def ibtxt(txt):
    return ('bolditalic', txt)

def ntxt(txt):
    return ('normal', txt)

def btxt(txt):
    return ('bold', txt)

def itxt(txt):
    return ('italic', txt)

def to_txt(txt):
    if isinstance(txt, str):
        return txt
    elif isinstance(txt, tuple):
        return txt[1]
    else:
        return ''.join([to_txt(t) for t in txt])

# #############################################################################
# utility
# #############################################################################

def has_key(key, x):
    if x:
        return key in x
    return False

def get_urls(txt):
    return re.findall(r'(https?://[^\s]+)', txt)

def mk_call(cmd, rmap=None, disown=False, use_pipe=True):
    if not rmap:
        rmap = {}

    for key, val in rmap.items():
        cmd = cmd.replace(key, val)

    if disown:
        with open(os.devnull, 'w') as f:
            subprocess.Popen(cmd, shell=True, stdout=f, stderr=f, preexec_fn=os.setpgrp)
    else:
        if use_pipe:
            pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            pipe = subprocess.Popen(cmd, shell=True)

        out, err = pipe.communicate()
        logging.info('mk_call:%s', cmd)
        try:
            if pipe.returncode == 0:
                logging.info('mk_call:exit_0:%s:%s', cmd, out.decode('utf-8'))
            else:
                logging.critical('mk_call:exit_%d:%s:%s', pipe.returncode, cmd, err.decode('utf-8'))
        except AttributeError:
            pass

        return out


class ObservableConfig:
    signals = ['changed']

    def __init__(self, cfg_obj):
        self._cfg_obj = cfg_obj

    def __getattr__(self, name):
        return getattr(self._cfg_obj, name)

    def __setattr__(self, name, value):
        if name != '_cfg_obj' and hasattr(self._cfg_obj, name):
            setattr(self._cfg_obj, name, value)
            urwid.emit_signal(self, 'changed', name, value)
        else:
            super().__setattr__(name, value)

urwid.register_signal(ObservableConfig, ObservableConfig.signals)

# #############################################################################
# signal utility
# #############################################################################

def hash_contact(x):
    h = ''
    if x.get('number'):
        h = x['number']
    elif x.get('groupId'):
        h = x['groupId']
    else:
        logging.critical('hash_contact:No number or groupId')
    return h

def get_contact_name(x):
    if not x:
        logging.critical('get_contact_name:empty sender')
        return "NULL"

    name = x.get('name')
    if name or name.strip(' ') != '':
        return name

    number = x.get('number')
    if number:
        return number

    return "ERR"

def get_contact_color(x):
    color = x.get('color')
    if color or color.strip(' ') != '':
        return color

    return 'white'

def is_contact_group(contact):
    return has_key('groupId', contact)

def is_envelope_outgoing(envelope):
    try:
        envelope['target']
        return True
    except KeyError:
        return False

def is_envelope_group_message(envelope):
    try:
        envelope['dataMessage']['groupInfo']['groupId']
        return True
    except (KeyError, TypeError):
        return False

def get_envelope_msg(envelope):
    try:
        return envelope['dataMessage']['message']
    except (KeyError, TypeError):
        return None

def get_envelope_contact(envelope, signal):
    x = None
    if envelope.get('target'):
        x = envelope['target']
    elif is_envelope_group_message(envelope):
        x = get_envelope_group_id(envelope)
    else:
        x = envelope['source']

    contact = signal.get_contact(x)
    if not contact:
        logging.critical('NULL_CONTACT:%s', envelope)

    return contact

def get_envelope_group_id(envelope):
    try:
        return envelope['dataMessage']['groupInfo']['groupId']
    except (KeyError, TypeError):
        return None

def get_envelope_attachments(envelope):
    try:
        return envelope['dataMessage']['attachments']
    except (KeyError, TypeError):
        return []

def get_attachment_name(attachment):
    try:
        return attachment['contentType']
    except (KeyError, TypeError):
        return os.path.basename(attachment)

def get_attachment_path(attachment):
    if isinstance(attachment, dict):
        received_attachment = os.path.join(SIGNALCLI_ATTACHMENT_FOLDER, str(attachment['id']))
        if not os.path.exists(received_attachment):
            received_attachment = os.path.join(SIGNALCLI_LEGACY_ATTACHMENT_FOLDER, str(attachment['id']))
        return received_attachment
    elif isinstance(attachment, str) and os.path.exists(attachment):
        return attachment

# #############################################################################
# ui utility
# #############################################################################

class FocusableText(urwid.AttrMap):
    def __init__(self, markup, keypress = lambda size, key : key, **kwargs):
        text = urwid.Text(markup, **kwargs)
        text._selectable = True
        text.keypress = keypress
        super().__init__(text, None, focus_map=LIST_FOCUS_MAP)

CURSOR_FIRST = 'scli cursor first'
CURSOR_LAST  = 'scli cursor last'

class VimListBox(urwid.ListBox):

    def __init__(self, body):
        super().__init__(body)
        self._command_map['j'] = urwid.CURSOR_DOWN
        self._command_map['k'] = urwid.CURSOR_UP
        self._command_map['g'] = CURSOR_FIRST
        self._command_map['G'] = CURSOR_LAST

    def _focus_first_selectable(self, reverse = False):
        for pos in self.body.positions(reverse):
            if self.body[pos].selectable():
                self.body.set_focus(pos)
                break

    def focus_first(self):
        self._focus_first_selectable()

    def focus_last(self):
        self._focus_first_selectable(True)

    def keypress(self, size, key):
        # override the default, which for CURSOR_MAX_{LEFT,RIGHT} does not take
        # child.selectable() into account; we do this here instead of __init__,
        # since CommandMap is not iterable
        if self._command_map[key] == urwid.CURSOR_MAX_LEFT:
            self._command_map[key] = CURSOR_FIRST
        elif self._command_map[key] == urwid.CURSOR_MAX_RIGHT:
            self._command_map[key] = CURSOR_LAST
        key = super().keypress(size, key)
        if self._command_map[key] == CURSOR_FIRST:
            self.focus_first()
            key = None
        elif self._command_map[key] == CURSOR_LAST:
            self.focus_last()
            key = None
        elif key == 'r':
            pass # TODO: refresh
        return key


# #############################################################################
# clipboard
# #############################################################################

class clip:
    mime_order = ['image/png', 'image/jpeg', 'image/jpg', 'text/uri-list']

    @staticmethod
    def xrun(mime):
        p = Popen(['xclip', '-selection', 'clipboard', '-t', mime, '-o'], stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        return out

    @staticmethod
    def xrun_lines(mime):
        out = clip.xrun(mime)
        if out:
            return out.decode('utf-8').split('\n')

    @staticmethod
    def xfiles():
        out = clip.xrun_lines('TARGETS')

        for otype in out:
            for mtype in clip.mime_order:
                if mtype == otype:
                    if mtype.startswith('image/'):
                        content = clip.xrun(mtype)
                        suffix = '.' + mtype.split('/')[1]
                        tmp = tempfile.NamedTemporaryFile(mode='w+b', suffix=suffix, delete=False)
                        tmp.write(content)
                        tmp.flush()
                        tmp.close()
                        return [tmp.name]
                    elif mtype == 'text/uri-list':
                        content = clip.xrun_lines(mtype)
                        return [x.replace('file://', '') for x in content[1:]]

    @staticmethod
    def xput(txt):
        if not txt:
            return

        p = Popen(['xclip', '-selection', 'clipboard'], stdout=PIPE, stderr=PIPE, stdin=PIPE)
        p.stdin.write(bytes(txt, 'utf-8'))
        p.stdin.close()
        p.wait()

    @staticmethod
    def put(state, txt):
        cmd = state.cfg.clipboard_put_command
        if cmd == "":
            return clip.xput(txt)

        return mk_call(cmd, {'%s': txt})

    @staticmethod
    def files(state):
        cmd = state.cfg.clipboard_get_command
        if cmd == "":
            return clip.xfiles()

        return mk_call(cmd).split('\n')

# #############################################################################
# commands
# #############################################################################

class Commands:
    def __init__(self, state):
        self.state = state
        self.map = [(['attach', 'a'], self.attach),
                    (['edit', 'e'], self.external_edit),
                    (['attachClip', 'c'], self.attach_clip),
                    (['openAttach', 'o'], self.open_last_attach),
                    (['openUrl', 'u'], self.open_last_url),
                    (['toggleNotifications', 'n'], self.toggle_notifications),
                    (['toggleAutohide', 'h'], self.toggle_autohide),
                    (['quit', 'q'], self.quit)]

    def exec(self, cmd, args):
        for (abbrvs, fn) in self.map:
            if cmd in [abbrv.lower() for abbrv in abbrvs]:
                fn(args)
                return

    def external_edit(self, args):
        if args and len(args) == 1 and (args[0].startswith("/") or args[0].startswith("~/")):
            msg_file_path = os.path.expanduser(args[0])
        else:
            msg_file_path = tempfile.NamedTemporaryFile(suffix='.md', delete=False).name
            if args:
                with open(msg_file_path, "w") as msg_file:
                    msg_file.write(' '.join(args))

        self.state.loop.stop()
        mk_call(self.state.cfg.editor_command + " " + msg_file_path, use_pipe=False)
        print('Please wait...')
        self.state.loop.start()

        with open(msg_file_path, 'r') as msg_file:
            msg = msg_file.read().strip()
            self.state.send_message(msg)

    def open_file(self, path):
        if os.path.exists(path):
            if isinstance(path, dict):
                mk_call(self.state.cfg.open_command, path, True)
            mk_call(self.state.cfg.open_command, {'%u': path}, True)

    def attach(self, args):
        try:
            args[0]
        except IndexError:
            self.state.set_error(':attach takes at least one argument.')
            return

        attachment = os.path.expanduser(args[0])
        message = ' '.join(args[1:])
        if not os.path.exists(attachment):
            self.state.set_error('File does not exist: ' + attachment)
            return

        self.state.send_message(message, [attachment])

    def attach_clip(self, args):
        files = clip.files(self.state)
        message = ' '.join(args)

        if files:
            self.state.send_message(message, files)
        else:
            self.state.set_notification('Clipboard is empty.')

    def open_attach(self, envelope):
        result = False
        attachments = get_envelope_attachments(envelope)
        for attachment in attachments:
            file_path = get_attachment_path(attachment)
            if file_path:
                self.open_file(file_path)
                result = True

        return result

    def open_last_attach(self, args):
        for txt in self.state.current_chat[::-1]:
            if self.open_attach(txt.envelope):
                return

    def open_url(self, envelope):
        txt = get_envelope_msg(envelope)
        urls = get_urls(txt)
        if urls:
            mk_call(self.state.cfg.open_command, {'%u': urls[0]}, True)
            return True

        return False

    def open_last_url(self, args):
        for txt in self.state.current_chat[::-1]:
            if self.open_url(txt.envelope):
                return

    def toggle_notifications(self, args):
        self.state.cfg.enable_notifications = not self.state.cfg.enable_notifications
        notif = 'Desktop notifications are '
        if self.state.cfg.enable_notifications:
            notif = notif + 'ON'
        else:
            notif = notif + 'OFF'
        self.state.set_notification(notif + '.')

    def toggle_autohide(self, args):
        self.state.cfg.contacts_autohide = not self.state.cfg.contacts_autohide

    def send_notification(self, sender, message):
        if self.state.cfg.enable_notifications:
            mk_call(self.state.cfg.notification_command, {'%s': sender, '%m': message})

    def quit(self, args):
        raise urwid.ExitMainLoop()

# #############################################################################
# signal
# #############################################################################

class Signal:
    signals = ['receive_message', 'send_message']

    def __init__(self, user):
        self.user = user
        self._data = None
        self._buffer = b''
        self._path = os.path.join(SIGNALCLI_DATA_FOLDER, user)

        if not os.path.exists(self._path):
            self._path = os.path.join(SIGNALCLI_LEGACY_DATA_FOLDER, user)
            if not os.path.exists(self._path):
                raise Exception(self.user + " does not exist!")

        self.reload_data()

    def reload_data(self):
        with open(self._path) as f:
            self._data = json.load(f)

    def start_daemon(self, loop):
        fd = loop.watch_pipe(self.daemon_handler)
        return Popen(['signal-cli', '-u', self.user, 'daemon', '--json'], stdout=fd, stderr=fd, close_fds=True)

    def daemon_handler(self, line):
        line = self._buffer + line
        lines = line.split(b'\n')
        if lines[-1] != b'':
            # Not a complete message. Store in buffer
            self._buffer = lines[-1]
        else:
            self._buffer = b''

        # The last item is either empty or an incomplete message, so we don't process it
        for line in lines[:-1]:
            if not line.strip():
                continue

            try:
                e = json.loads(line)
                urwid.emit_signal(self, 'receive_message', e['envelope'])
            except Exception as e:
                logging.error('input: %s', line)
                logging.exception(e)
                # TODO: display error to user
                continue

    def send_message(self, contact, message="", attachments=None):
        if not attachments:
            attachments = []

        attachment_paths = [os.path.expanduser(attachment) for attachment in attachments]
        if not all([os.path.exists(attachment_path) for attachment_path in attachment_paths]):
            logging.warning('send_message: Attached file(s) does not exist.')
            return

        if not contact.get('number'):
            args = ['signal-cli', '--dbus', 'send', '--message', message]
            target = None
            if contact.get('number'):
                target = contact['number']
            else:
                target = contact['groupId']
                args.append('--group')
            args.append(target)

            if attachment_paths:
                args.append('--attachment')
            for attachment_path in attachment_paths:
                args.append(attachment_path)
        else:
            # didn't figure out how to send to a group via dbus, yet
            target = contact['number']
            args = ['dbus-send', '--session', '--dest=org.asamk.Signal',
                    '--type=method_call', '/org/asamk/Signal',
                    'org.asamk.Signal.sendMessage', 'string:' + message,
                    'array:string:' + ','.join(attachment_paths),
                    'array:string:' + target]

        p = Popen(args, stdout=PIPE, stderr=PIPE)
        _out, error = p.communicate()
        if p.returncode != 0:
            logging.error('send_message: exit code=%d:err=%s', p.returncode, error)
            # https://github.com/AsamK/signal-cli/issues/73
            # return

        ts = datetime.now().timestamp()
        envelope = {'source':self.user,
                    'target': target,
                    'timestamp': ts,
                    'dataMessage': {'message': message,
                                    'attachments': attachments,
                                    'timestamp': ts}}

        urwid.emit_signal(self, 'send_message', envelope)

    def contacts(self):
        return list(filter(lambda x: bool(get_contact_name(x).strip(' ')),
                           self._data['contactStore']['contacts']))

    def groups(self):
        # Need to filter out any groups that where "active" == false
        return list(filter(lambda a: bool(a['active']),
                    (filter(lambda n: bool(n['name'].strip(' ')),
                     self._data["groupStore"]['groups']))))

    def get_contact(self, number_or_id):
        for contact in self.contacts():
            if contact['number'] == number_or_id:
                return contact

        for group in self.groups():
            if group['groupId'] == number_or_id:
                return group

urwid.register_signal(Signal, Signal.signals)

# #############################################################################
# ContactsWindow
# #############################################################################

class ContactsWindow(VimListBox):
    signals = ['notify_count_changed']

    def __init__(self, state):
        self.state = state
        self.notify_count = 0

        super().__init__(urwid.SimpleFocusListWalker([]))
        self.update_contacts()

        urwid.connect_signal(self.state.signal, 'receive_message', self.on_receive_message)
        urwid.connect_signal(self.state, 'current_contact_changed', self.on_current_contact_changed)

    def set_contact_notify_count(self, w, count):
        if hasattr(w, 'notify_count'):
            self.notify_count += count - w.notify_count
        else:
            self.notify_count += count

        urwid.emit_signal(self, 'notify_count_changed', self.notify_count)

        w.notify_count = count
        if count > 0:
            w.original_widget.set_text([('bold', '({}) '.format(w.notify_count)), get_contact_name(w.contact)])
        else:
            w.original_widget.set_text(get_contact_name(w.contact))

    def on_current_contact_changed(self, _old, _current, _focus=False):
        if _current:
            self.set_contact_notify_count(self.focus, 0)
        if _old != _current:
            for w in self.body:
                if w.contact == _old:
                    w.set_attr_map({})
                elif _current and w.contact == _current:
                    w.set_attr_map({None: 'selected'})

    def on_receive_message(self, envelope):
        contact = get_envelope_contact(envelope, self.state.signal)
        has_msg = get_envelope_msg(envelope)
        if contact == self.state.current_contact or not has_msg:
            return

        for w in self.body:
            if w.contact == contact:
                self.set_contact_notify_count(w, w.notify_count + 1)
                return

    def update_contacts(self):
        def get_all_contacts(signal):
            xs = []
            xs.append('---')
            xs.append('Groups')
            xs.append('---')
            xs.extend(signal.groups())
            xs.append('---')
            xs.append('Contacts')
            xs.append('---')
            xs.extend(signal.contacts())
            return xs

        def mk_contact(x):
            widget = None
            contact = None
            if x == '---':
                widget = urwid.Divider('-')
            elif isinstance(x, str):
                widget = urwid.Text(('bold', '~~ ' + x + ' ~~'), align='center')
            else:
                widget = urwid.Text(get_contact_name(x))
                contact = x
                # we want to "select" and interact with these Text widgets
                widget._selectable = True
                def keypress(size, key):
                    if key in ('enter', 'l'):
                        self.state.set_current_contact(x, key == 'enter')
                        return None
                    return key
                widget.keypress = keypress

            am = urwid.AttrMap(widget, None, focus_map='reversed')
            am.contact = contact
            am.notify_count = 0
            return am

        pre_focus = None
        try:
            pre_focus = self.focus.contact
        except AttributeError:
            pass
        self.body[:] = [mk_contact(x) for x in get_all_contacts(self.state.signal)]
        if not pre_focus:
            self.focus_first()
        else:
            try:
                self.focus_position = map   (lambda n, am: n,
                                      filter(lambda n, am: am.contact == pre_focus,
                                      enumerate(self.body)))[0]
            except IndexError:
                self.focus_first()

    def keypress(self, size, key):
        key = super().keypress(size, key)
        if key == 'u':
            self.state.set_current_contact(None, False)
            key = None
        return key

# #############################################################################
# ChatWindow
# #############################################################################

class ChatWindow(urwid.Pile):

    # #########################################################################
    # Editor; handling
    # - a mode (None or any single character in mode_map's keys) given by the
    #   first entered symbol ('backspace' resets to None):
    #   - the current mode is tracked and available to signals,
    #   - an 'editor_mode_changed' signal is fired on mode changes
    #   - the caption is changed according to mode_map's values
    # - in mode None, 'enter' signals 'activate' + resets text if at end of
    #   text and no preceeding '\\' else insert new-line
    # - other modes, 'enter' just signals 'activate' + reset
    # #########################################################################

    class Editor(urwid.Edit):
        signals = [urwid.ACTIVATE, 'editor_mode_changed']

        # mode_map is a mapping from 'key' (as in keypress(size, key)) to
        # a text markup suitable for the caption of an urwid.Edit.
        # It must include 'None' for the default mode and cannot include 'enter'
        # as it interferes with the line-break logic.
        def __init__(self, mode_map = {None: ('bold', '> ')}):
            self._mode = None
            self._mode_map = mode_map
            super().__init__(self._mode_map[self._mode], multiline=True)

        @property
        def mode(self):
            return self._mode

        @mode.setter
        def mode(self, new):
            old = self._mode
            self._mode = new
            if not old == new:
                self.set_caption(self._mode_map[new])
                urwid.emit_signal(self, 'editor_mode_changed', old, new)

        def keypress(self, size, key):
            if key == 'enter':
                send = True
                if not self.mode:
                    send = False
                    if self.edit_pos == len(self.edit_text):
                        if self.edit_pos > 0 and self.edit_text[self.edit_pos-1] == '\\':
                            super().keypress(size, 'backspace')
                        else:
                            send = True
                if send:
                    urwid.emit_signal(self, urwid.ACTIVATE, self.mode, self.edit_text)
                    self.mode = None
                    self.set_edit_text('')
                    return None

            mode = self.mode
            if key == 'esc' or self.edit_pos == 0 and key == 'backspace':
                mode = None
            elif self.edit_pos == 0 and not mode and key in self._mode_map:
                mode = key
            if self.mode != mode:
                self.mode = mode
                return None

            return super().keypress(size, key)


    class MessageInfo(VimListBox):
        def __init__(self, state, envelope):
            self.state = state

            source = envelope['source']
            msg = get_envelope_msg(envelope)
            date = None
            try:
                date = datetime.utcfromtimestamp(envelope['timestamp'])
            except ValueError:
                date = datetime.utcfromtimestamp(envelope['timestamp'] / 1000)
            date = date.strftime('%H:%M (%Y-%m-%d)')

            txt_name = FocusableText([btxt('Name   : '),
                                      ntxt(get_contact_name(state.signal.get_contact(source)))])
            txt_source = FocusableText([btxt('Number : '),
                                        ntxt(source)])
            txt_date = FocusableText([btxt('Date   : '),
                                      ntxt(date)])
            txt_msg = FocusableText([btxt('Message: '),
                                     ntxt(msg)])
            txt_urls = FocusableText([btxt('Links')], align='center')

            urls = []
            for url in get_urls(msg):
                txt_url = FocusableText([ntxt(url)])
                txt_url.full_path = url
                urls.append(txt_url)

            txt_atchs = FocusableText(btxt('Attachments'), align='center')

            atchs = []
            for atch in get_envelope_attachments(envelope):
                txt_atch = FocusableText(ntxt(get_attachment_name(atch)))
                txt_atch.original_widget.full_path = get_attachment_path(atch)
                atchs.append(txt_atch)


            items = [txt_name, txt_source, txt_date, txt_msg, txt_urls, *urls, txt_atchs, *atchs]
            super().__init__(urwid.SimpleFocusListWalker(items))

        def keypress(self, size, key):
            item = self.body[self.focus_position].original_widget
            key = super().keypress(size, key)
            if key == 'y':
                text, _ = item.get_text()
                key = None
                try:
                    clip.put(self.state, item.full_path)
                except AttributeError:
                    try:
                        clip.put(self.state, text.split(": ")[1])
                    except IndexError:
                        clip.put(self.state, text)
            elif key in ('enter', 'o'):
                key = None
                try:
                    self.state.commands.open_file(item.full_path)
                except (AttributeError, TypeError):
                    pass
            return key


    def __init__(self, state):
        self.state = state
        self.pop_up_action = None

        self.search_list = urwid.SimpleFocusListWalker([])

        self._wsearch = urwid.ListBox(self.search_list)
        self._wtitle = urwid.Text('')
        self._wline = ChatWindow.Editor({
            None: ('bold', '> '), # default input
            '/' : ('bold', '/'),  # search mode
            ':' : ('bold', ':'),  # command mode
        })
        self._wlist = VimListBox(self.state.current_chat)

        self._w = urwid.WidgetPlaceholder(self._wlist)
        super().__init__([('pack'    , self._wtitle),
                          (1         , urwid.SolidFill('-')),
                          ('weight',1, self._w),
                          (1         , urwid.SolidFill('-')),
                          ('pack'    , self._wline)])

        urwid.connect_signal(self._wline, 'postchange', self.on_edit_text_changed)
        urwid.connect_signal(self._wline, urwid.ACTIVATE, self.on_edit_active)
        urwid.connect_signal(self._wline, 'editor_mode_changed', self.on_edit_mode_changed)
        urwid.connect_signal(self.state, 'current_contact_changed', self.on_current_contact_changed)
        urwid.connect_signal(self.state, 'dialog_requested', self.show_pop_up)
        urwid.connect_signal(self.state.signal, 'receive_message', self.on_new_message)
        urwid.connect_signal(self.state.signal, 'send_message', self.on_new_message)

    @property
    def search_mode(self):
        return self._wline.mode == '/'

    def show_pop_up(self, widget):
        org = self._w.original_widget

        def on_pop_up_closed(sender, accepted, result):
            self._w.original_widget = org
            urwid.emit_signal(self.state, 'dialog_finished', accepted, result)

        class PopUpWrapper(urwid.LineBox):
            signals = ['closed']

            def __init__(self, widget, buttons=True):
                self._widget = widget
                self._widget.result = None

                self._buttons = buttons
                if buttons:
                    btn_ok = urwid.Button('OK')
                    btn_cancel = urwid.Button('Cancel')
                    self.buttons_grid = urwid.GridFlow([btn_ok, btn_cancel],
                                                        10, 1, 1,
                                                        ('relative', 100))
                    super().__init__(urwid.Frame(widget, footer=self.buttons_grid))
                else:
                    super().__init__(widget)

            def keypress(self, size, key):
                if self._buttons:
                    if key == 'tab':
                        if self.original_widget.focus_position == 'footer':
                            if self.buttons_grid.focus_position == 0:
                                self.buttons_grid.focus_position = 1
                            else:
                                self.original_widget.focus_position = 'body'
                        else:
                            self.buttons_grid.focus_position = 0
                            self.original_widget.focus_position = 'footer'
                    # I'm not sure why I need to do this:
                    elif self.original_widget.focus_position == 'body':
                        self.original_widget.keypress(size, key)
                    elif key == 'enter':
                        if self.buttons_grid.focus_position == 0:
                            self._emit('closed', True, self._widget.result)
                        else:
                            self._emit('closed', False, None)
                        self._emit('closed', False, None)

                if key == 'q':
                    self._emit('closed', False, None)

        wrapper = PopUpWrapper(widget)
        urwid.connect_signal(wrapper, 'closed', on_pop_up_closed)

        popup = urwid.Overlay(wrapper,
                              self._w.original_widget,
                              align='center',
                              valign='middle',
                              width=('relative', 85),
                              height=('relative', 75))

        self._w.original_widget = popup
        return wrapper

    def on_edit_mode_changed(self, old, new):
        if '/' in (old, new):
            self._w.original_widget = self._wsearch if self.search_mode else self._wlist
            self.search_in_chat()

    def on_edit_text_changed(self, _sender, _old_text):
        if self.search_mode:
            self.search_in_chat()

    def search_in_chat(self):
        if not self.search_mode:
            return

        search_txt = self.get_edit_text()
        def setx(i, txt):
            txt.real_index = i
            return txt
        found = [setx(i, txt) for i, txt in enumerate(self.state.current_chat) if search_txt in txt.original_widget.text]
        self.search_list.clear()
        self.search_list.extend(found)

    def on_new_message(self, _envelope):
        self.focus_chatlast()

    def is_focused_input(self):
        return self.focus_position == 4

    def is_focused_chat(self):
        return self.focus_position == 2

    def focus_input(self):
        self.focus_position = 4

    def focus_chat(self):
        self.focus_position = 2

    def focus_chatfirst(self):
        self._w.original_widget.focus_first()

    def focus_chatlast(self):
        self._w.original_widget.focus_last()

    def get_edit_text(self):
        return self._wline.get_edit_text()

    def set_title(self, contact):
        if contact:
            num = contact.get("number")
            if not num:
                num = ', '.join([get_contact_name(self.state.signal.get_contact(number)) for number in contact['members']])

            self._wtitle.set_text([('bold', get_contact_name(contact)), ' (', num, ')'])
        else:
            self._wtitle.set_text('')

    def on_current_contact_changed(self, old, current, focus=False):
        self.state.backup_chat(old)
        self.state.clear_current_chat()
        self.set_title(current)

        if current:
            chat = self.state.chats.get(hash_contact(current))
            if chat:
                self.state.current_chat.extend(chat)

            self.focus_chatlast()

    def get_current_envelope(self):
        try:
            if self.search_mode:
                return self.search_list[self._wsearch.focus_position].envelope
            return self.state.current_chat[self._wlist.focus_position].envelope
        except (IndexError, AttributeError):
            return None

    def on_edit_active(self, mode, txt):
        if mode == ':':
            elems = list(filter(lambda x: x != '', txt.split(' ')))
            try:
                cmd = elems[0].lower()
                args = elems[1:]
                self.state.commands.exec(cmd, args)
            except IndexError:
                pass
        elif mode == '/':
            pass
        elif txt.strip(' ') != '':
            self.state.send_message(txt)

    def keypress(self, size, key):
        key = super().keypress(size, key)

        if self.state.current_chat and self.is_focused_chat():
            key = self._w.original_widget.keypress(size, key)
            envelope = self.get_current_envelope()
            if key in ('enter', 'l'):
                if self.search_mode:
                    real_index = self.search_list[self._wsearch.focus_position].real_index
                    self._wline.set_edit_text(txt)
                    self._wlist.focus_position = real_index
                else:
                    self.state.commands.open_attach(envelope) or self.state.commands.open_url(envelope)
            elif key == 'o':
                self.state.commands.open_url(envelope) or self.state.commands.open_attach(envelope)
            elif key == 'y':
                txt = get_envelope_msg(envelope)
                clip.put(self.state, txt)
            elif key == 'd':
                if self.search_mode:
                    item = self.search_list[self._wsearch.focus_position]
                    real_index = item.real_index
                    del self.search_list[self._wsearch.focus_position]
                    del self.state.current_chat[real_index]
                else:
                    del self.state.current_chat[self._wlist.focus_position]
            elif key == 'i':
                self.show_pop_up(ChatWindow.MessageInfo(self.state, envelope))
            elif key == 'q':
                # TODO: quote (https://github.com/AsamK/signal-cli/issues/151)
                pass
        return key

urwid.register_signal(ChatWindow.Editor, ChatWindow.Editor.signals)

# #############################################################################
# MainWindow
# #############################################################################

class MainWindow(urwid.Frame):

    class NiceBox(urwid.AttrMap):
        def __init__(self, w, title=''):
            box = urwid.AttrMap(urwid.LineBox(urwid.AttrMap(w, 'normal'), title_align='center', title=title), 'box_normal')
            super().__init__(box, None, focus_map={'box_normal':'box_focused'})


    def __init__(self, state):
        self.state = state

        # ui
        self._wcontacts = ContactsWindow(self.state)
        self._wchat = ChatWindow(self.state)
        self._wstatus = urwid.Text("...")
        self._wnotify_count = urwid.Text("...")

        self._wcontext = urwid.Columns([('weight', 1, MainWindow.NiceBox(self._wcontacts)),
                                        ('weight', 3, MainWindow.NiceBox(self._wchat))],
                                       dividechars=0, focus_column=0)
        super().__init__(self._wcontext,
                         footer=urwid.Columns([self._wstatus, ('pack', self._wnotify_count)]))

        # signals
        urwid.connect_signal(self.state, 'current_contact_changed', self.on_current_contact_changed)
        urwid.connect_signal(self.state, 'status_changed', self.on_status_changed)
        urwid.connect_signal(self.state, 'notification_changed', self.on_notification_changed)
        urwid.connect_signal(self.state, 'error_changed', self.on_error_changed)
        urwid.connect_signal(self.state.cfg, 'changed', self.on_cfg_changed)
        urwid.connect_signal(self._wcontacts, 'notify_count_changed', self.on_notify_count_changed)

    def set_status(self, txt):
        self._wstatus.set_text(txt)

    @property
    def current_focus(self):
        assert self.focus_position == 'body'
        if len(self._wcontext.contents) == 2 and self._wcontext.focus_position == 0:
            return 'contacts'
        elif self._wchat.is_focused_chat():
            return 'chat'
        else:
            assert self._wchat.is_focused_input()
            return 'input'

    @current_focus.setter
    def current_focus(self, new):
        self.on_focus_changing(new)
        body_pos = 0 if len(self._wcontext.contents) == 1 else 1
        if self.current_focus == new:
            pass
        elif new == 'contacts':
            self._wcontext.set_focus(0)
        elif new == 'chat':
            self._wcontext.set_focus(body_pos)
            self._wchat.focus_chat()
        elif new == 'input':
            self._wcontext.set_focus(body_pos)
            self._wchat.focus_input()
        else:
            assert new in ('contacts', 'chat', 'input')

    def on_focus_changing(self, new):
        is_hidden = len(self._wcontext.contents) == 1
        can_be_hidden = not new == 'contacts' and self.state.cfg.contacts_autohide
        if not is_hidden == can_be_hidden:
            self._toggle_contacts()

    def _toggle_contacts(self):
        if len(self._wcontext.contents) == 2:
            self._wcontext.contents.clear()
            self._wcontext.contents.append(
                (MainWindow.NiceBox(self._wchat),
                 self._wcontext.options(width_amount=3)))
        else:
            self._wcontext.contents.insert(0,
                (MainWindow.NiceBox(self._wcontacts),
                 self._wcontext.options(width_amount=1)))

    _focus_order = ['contacts', 'chat', 'input']

    def focus_next(self):
        index = self._focus_order.index(self.current_focus)
        self.current_focus = self._focus_order[(index+1)%len(self._focus_order)]

    def focus_prev(self):
        index = self._focus_order.index(self.current_focus)
        self.current_focus = self._focus_order[(index-1)%len(self._focus_order)]

    def show_help_pop_up(self):
        class HelpDialog(VimListBox):
            def __init__(self):
                super().__init__([urwid.Text(btxt("Keybindings")),
                                  urwid.Text(btxt("Commands"))])
        if self.current_focus == 'contacts':
            self._wchat.show_pop_up(HelpDialog())
        elif self.current_focus == 'chat':
            self._wchat.show_pop_up(HelpDialog())

    def on_current_contact_changed(self, old, current, focus=False):
        if self.state.status_data is self.state.current_contact:
            self.state.set_status('')

        if focus:
            self.current_focus = 'input'

    def on_status_changed(self, status, data):
        self.set_status(status)

    def on_notification_changed(self, notif, data):
        self.set_status(notif)

    def on_error_changed(self, err):
        self.set_status(err)

    def on_cfg_changed(self, key, val):
        if key == 'contacts_autohide':
            self.on_focus_changing(self.current_focus)

    def on_notify_count_changed(self, count):
        self._wnotify_count.set_text(btxt(str(count)))

    def keypress(self, size, key):
        key = super().keypress(size, key)

        if key == 'tab':
            self.focus_next()
        elif key == 'shift tab':
            self.focus_prev()
        elif key in (':', '/'):
            self.current_focus = 'input'
            self._wchat._wline.mode = key
        elif key == '?':
            self.show_help_pop_up()

        return key

# #############################################################################
# state
# #############################################################################

class State:
    signals = ['current_contact_changed', 'status_changed', 'notification_changed', 'error_changed', 'dialog_requested', 'dialog_finished']

    def __init__(self, cfg):
        self.signal = Signal(cfg.username)
        self.cfg = cfg
        self.chats = {}
        self.error = ''
        self.status = ''
        self.notification = ''
        self.status_data = None
        self.current_contact = None
        self.loop = None
        self.current_chat = urwid.SimpleFocusListWalker([])

        self.commands = Commands(self)

        urwid.connect_signal(self.signal, 'receive_message', self.on_receive_message)
        urwid.connect_signal(self.signal, 'send_message', self.on_send_message)
        urwid.connect_signal(self, 'current_contact_changed',
            lambda old, contact, focus:
                self.set_program_subtitle(
                    'Message ' + get_contact_name(contact) if contact else None))

    def send_message(self, message, attachments=None):
        if not self.current_contact:
            self.set_error('error: no contact selected, cannot send message')
        elif message or attachments:
            self.signal.send_message(self.current_contact, message, attachments)

    def set_program_subtitle(self, subtitle):
        my_contacts = list(filter(lambda x: x.get('number') == self.cfg.username, self.signal.contacts()))
        my_name = get_contact_name(my_contacts[0]) if len(my_contacts) == 1 else self.cfg.username
        title = 'scli ' + my_name
        if subtitle:
            title += ': ' + subtitle
        try:
            self.loop.screen.write('\x1b]2;' + title + '\x07')
        except AttributeError:
            pass

    def set_current_contact(self, contact, focus=False):
        old = self.current_contact
        self.current_contact = contact
        urwid.emit_signal(self, 'current_contact_changed', old, contact, focus)

    def set_status(self, status, data=None):
        self.status = status
        self.status_data = data
        urwid.emit_signal(self, 'status_changed', status, data)

    def set_notification(self, notif, data=None):
        self.notification = notif
        self.status_data = data
        urwid.emit_signal(self, 'notification_changed', notif, data)

    def set_error(self, err):
        self.error = err
        urwid.emit_signal(self, 'error_changed', err)

    def show_dialog(self, w):
        urwid.emit_signal(self, 'dialog_requested', w)

    def clear_current_chat(self):
        self.current_chat.clear()

    def backup_chat(self, contact):
        if contact:
            self.chats[hash_contact(contact)] = [x for x in self.current_chat]

    def get_chat_for_envelope(self, envelope):
        contact = get_envelope_contact(envelope, self.signal)
        if contact == self.current_contact:
            return self.current_chat

        contact_hash = hash_contact(contact)
        if contact_hash not in self.chats:
            self.chats[contact_hash] = []

        return self.chats[contact_hash]

    def on_send_message(self, envelope):
        self.print_sent_message(envelope)

    def on_receive_message(self, envelope):
        msg = get_envelope_msg(envelope)
        sender = get_envelope_contact(envelope, self.signal)
        contact_name = get_contact_name(sender)

        if msg is None:
            logging.info('NOT_A_MESSAGE:%s', envelope)
            return
        logging.info('MESSAGE:%s', envelope)

        if sender != self.current_contact:
            notif = 'New message from ' + contact_name + ': "' + msg + '"'
            self.set_notification(notif, sender)

        formatted_message = self.print_received_message(envelope)
        self.commands.send_notification(contact_name, to_txt(formatted_message))

    def format_msg(self, message):
        message = '\n'.join(textwrap.wrap(message, width=self.cfg.wrap_at))

        if not self.cfg.use_formatting:
            return ntxt(message)

        i, m = 0, []
        while i < len(message):
            c = message[i]
            if c in ('_', '*', '~'):
                try:
                    end = message[i+1:].index(c)
                    sub = message[i+1:i+1+end]
                    m.append(c)
                    m.append((FORMAT_MAP[c], sub))
                    m.append(c)
                    i = i + 2 + end
                except ValueError:
                    m.append(c)
                    i = i + 1
            else:
                m.append(c)
                i = i + 1

        if not m:
            m = " "
        return m

    def print_received_message(self, envelope):
        source = envelope['source']
        is_group = is_envelope_group_message(envelope)
        attachments = get_envelope_attachments(envelope)

        txt = [btxt('>> ')]
        if is_group or self.cfg.show_names:
            contact = self.signal.get_contact(source)
            if contact:
                txt.append(ibtxt(get_contact_name(contact)))
            else:
                txt.append(btxt(source))
            txt.append(btxt(' | '))

        message = self.format_msg(get_envelope_msg(envelope))
        attachments = get_envelope_attachments(envelope)

        if attachments != []:
            attachments_txt = ', '.join([
                get_attachment_name(attachment) + ' (' + str(i) + ')'
                for i, attachment in enumerate(attachments)])
            txt.append(ntxt('[attached: ' + attachments_txt + '] '))

        txt.append(message)
        wtxt = FocusableText(txt)
        wtxt.envelope = envelope
        self.get_chat_for_envelope(envelope).append(wtxt)

        return txt[1:]

    def print_sent_message(self, envelope):
        message = self.format_msg(get_envelope_msg(envelope))
        attachments = get_envelope_attachments(envelope)

        txt = []
        if len(attachments) > 0:
            anames = ', '.join([os.path.basename(attachment) for attachment in attachments])
            txt.append(ntxt('[attached: '))
            txt.append(itxt(anames))
            txt.append(ntxt('] '))
            txt.append(ntxt(message))
        else:
            txt.append(message)

        if self.cfg.one_sided:
            align = 'left'
            txt.insert(0, btxt('<< '))
            if self.cfg.show_names:
                txt.insert(1, btxt('You | '))
        else:
            align = 'right'
            if self.cfg.show_names:
                txt.append(btxt(' | You'))
            txt.append(btxt(" <<"))

        wtxt = FocusableText(txt, align=align)
        wtxt.envelope = envelope
        self.get_chat_for_envelope(envelope).append(wtxt)

    def save_history(self):
        if not self.cfg.save_history:
            return

        self.backup_chat(self.current_contact)
        with open(SCLI_HISTORY_FILE, 'w') as history_file:
            envelopes = [x.envelope for vals in self.chats.values() for x in vals]
            items = {'envelopes': envelopes}
            history_file.write(json.dumps(items))

    def load_history(self):
        if not self.cfg.save_history or not os.path.exists(SCLI_HISTORY_FILE):
            return

        with open(SCLI_HISTORY_FILE, 'r') as history_file:
            history = json.load(history_file)
            for envelope in history['envelopes']:
                if is_envelope_outgoing(envelope):
                    self.print_sent_message(envelope)
                else:
                    self.print_received_message(envelope)

urwid.register_signal(State, State.signals)

# #############################################################################
# main
# #############################################################################

def parse_cfg_file(cfg_file_path):
    vars = {}
    cfg_file_path = os.path.expanduser(cfg_file_path)
    if os.path.exists(cfg_file_path):
        with open(cfg_file_path) as cfg_file:
            for line in cfg_file:
                if not line.startswith('#') and line.strip() != "":
                    name, var = line.partition("=")[::2]
                    vars[name.strip().replace('-', '_')] = var.strip()
    elif cfg_file_path != SCLI_CFG_FILE and cfg_file_path != "":
        print('Given config file not found: ' + cfg_file_path, file=sys.stderr)
        sys.exit(2)

    return vars

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c',
                        '--config-file',
                        type=str,
                        default=SCLI_CFG_FILE,
                        help='Config file. Configs in this file overrides every other config supplied by command line. (Default: ' + SCLI_CFG_FILE + ')')

    parser.add_argument('-u',
                        '--username',
                        type=str,
                        help='Phone number starting with "+" followed by country code.')

    parser.add_argument('-n',
                        '--enable-notifications',
                        default=False,
                        action='store_true',
                        help='Enable desktop notifications. (Also see --notification-command)')

    parser.add_argument('-N',
                        '--notification-command',
                        type=str,
                        default="notify-send scli '%s - %m'",
                        help='The command to run when a new message arrives. %%m is replaced with the message, %%s is replaced with the sender. (Default is "notify-send scli \'%%s - %%m\'')

    parser.add_argument('-o',
                        '--open-command',
                        type=str,
                        default='xdg-open "%u"',
                        help='File/URL opener command. %%u is replaced with the path. (Default is "xdg-open %%u")')

    parser.add_argument('-e',
                        '--editor-command',
                        type=str,
                        default='$EDITOR',
                        help='A text editor command to edit your messages externally.')

    parser.add_argument('-G',
                        '--clipboard-get-command',
                        type=str,
                        default="",
                        help='A command that returns a valid file path(s). When user calls `:attachClip` or `:c`, this command is executed and the returned file(s) will be added as attachment(s). The command should return one absolute file path per each line. (Default uses `xclip`)')

    parser.add_argument('-P',
                        '--clipboard-put-command',
                        type=str,
                        default="",
                        help='A command that puts given text to clipboard. %%s will be replaced with the text. (Default uses `xclip`.')

    parser.add_argument('-s',
                        '--save-history',
                        default=False,
                        action='store_true',
                        help='Enable saving history. History is saved as plain text. (Disabled by default.)')

    parser.add_argument('-f',
                        '--use-formatting',
                        default=False,
                        action='store_true',
                        help='Use _italic_, *bold*, ~strikethrough~ formatting in messages. (Disabled by default.)')

    parser.add_argument('-w',
                        '--wrap-at',
                        type=int,
                        default=300,
                        help='Wrap messages at given column.')

    parser.add_argument('--one-sided',
                        default=False,
                        action='store_true',
                        help='Show messages aligned to one side in message list. (Disabled by default.)')

    parser.add_argument('--show-names',
                        default=False,
                        action='store_true',
                        help='Show contact names even in message list even if it is one-to-one conversation. (Disabled by default.)')

    parser.add_argument('--contacts-autohide',
                        default=False,
                        action='store_true',
                        help='Autohide the contacts pane when it loses focus. (Disabled by default)')

    parser.add_argument('--no-daemon',
                        action='store_true',
                        help='Not really useful.')

    parser.add_argument('--no-italics',
                        default=False,
                        action='store_true',
                        help="don't use italics fonts (some fonts don't have those glyphs)")

    parser.add_argument('--debug',
                        default=False,
                        action='store_true')

    cfg = parser.parse_args()
    file_cfg = parse_cfg_file(cfg.config_file)
    for key, val in file_cfg.items():
        attr = getattr(cfg, key)
        if isinstance(attr, bool):
            setattr(cfg, key, val.lower() in ['true', 't', 'yes', 'y'])
        elif isinstance(attr, int):
            setattr(cfg, key, int(val))
        else:
            setattr(cfg, key, val)

    if not os.path.exists(SCLI_DATA_FOLDER):
        try:
            os.makedirs(SCLI_DATA_FOLDER)
        except OSError as exc:
            if not (exc.errno == errno.EEXIST and os.path.isdir(SCLI_DATA_FOLDER)):
                print("Can't create data directory.", file=sys.stderr)
                sys.exit(3)

    if cfg.debug:
        logging.basicConfig(filename=SCLI_LOG_FILE, level=logging.DEBUG)
    else:
        logging.basicConfig(filename=SCLI_LOG_FILE, level=logging.CRITICAL)

    if not cfg.username:
        ulist = []
        try:
            users = [x for x in os.listdir(SIGNALCLI_DATA_FOLDER)
                     if os.path.isfile(os.path.join(SIGNALCLI_DATA_FOLDER, x))]
            ulist.extend(users)
            legacy_users = [x for x in os.listdir(SIGNALCLI_LEGACY_DATA_FOLDER)
                            if os.path.isfile(os.path.join(SIGNALCLI_LEGACY_DATA_FOLDER, x))]
            ulist.extend(legacy_users)
        except FileNotFoundError:
            pass

        if not ulist:
            print("Couldn't find any linked device.", file=sys.stderr)
            sys.exit(1)
        elif len(ulist) == 1:
            cfg.username = ulist[0]
        else:
            print("Use one of these:", file=sys.stderr)
            for u in ulist:
                print("\tscli --username=" + u, file=sys.stderr)
            sys.exit(1)

    if cfg.no_italics:
        global PALETTE
        global ibtxt
        global itxt
        PALETTE = PALETTE_NO_ITALICS
        ibtxt = lambda txt: ('bold', txt)
        itxt = lambda txt: ('bold', txt)

    state = State(ObservableConfig(cfg))
    window = MainWindow(state)

    loop = urwid.MainLoop(window, palette=PALETTE)

    state.loop = loop
    state.set_program_subtitle(None)
    state.load_history()
    atexit.register(state.save_history)

    if not cfg.no_daemon:
        proc = state.signal.start_daemon(loop)
        def kill_wait():
            proc.terminate()
            proc.wait()
            return
        atexit.register(kill_wait)

    loop.run()

if __name__ == "__main__":
    main()
